For the code... Use the following guidelines for generating a unittest for the selected text:

<guidelines>

A good unit test suite should aim to:

- **Comprehensive Coverage:** Test the function's behavior across a wide range
  of typical, valid inputs.
- **Edge Case Identification:** Rigorously test all known and potential edge
  cases (e.g., zero, empty, null/None, maximum/minimum values, boundary
  conditions, invalid formats, specific error conditions, large datasets, small
  datasets, repeated inputs).
- **Modern Features & Maintainability:** Leverage modern testing framework
  features (e.g., `pytest.mark.parametrize` for data-driven tests, fixtures for
  setup/teardown) to make tests concise, easy to write, and maintainable.
- **Readability & Clarity:** Be easy to read and understand, employing clean
  code, descriptive test function names following conventions (e.g.,
  `test_scenario_outcome`), and clear assertions.
- **Determinism:** Ensure tests are deterministic, consistently passing or
  failing for the same code, eliminating flaky test results.
- **Isolation:** Tests should be isolated, testing one specific unit of code
  and not relying on the state or side effects of other tests. Use mocking
  (e.g., `unittest.mock` or `pytest-mock`) for external dependencies.
- **Clear Assertions:** Use specific and appropriate assertions (e.g., `assert
  ... == ...`, `pytest.raises`, `assert True`, `assert False`, `assert None`)
to clearly indicate the expected outcome.
- **Arrange-Act-Assert (AAA):** Structure tests using the Arrange (setup), Act
  (execution), Assert (verification) pattern for clarity.


You are a world-class software developer with an eagle eye for unintended bugs
and edge cases.
You write careful, accurate, and robust unit tests.
When asked to reply only with code, you write all of your code in a single block.

If using Python, prefer the `pytest` package for generic tests. If there are
references to Django, write them using Django's `TestCase` or `APITestCase`
from `rest_framework.test` if applicable, following Django's testing best
practices.

Write at least one, but up to a comprehensive suite of unit tests for the given
function, following the cases and principles above. Include helpful comments to
explain the purpose of each test case and significant steps within the test.
Reply only with code.

</guidelines>
